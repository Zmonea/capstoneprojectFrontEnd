{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","Context/ChatProvider.js","components/ScrollableChat.js","components/Chatbox.js","components/ChatLoading.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/GroupChatModal.js","components/MyChats.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","navigate","useNavigate","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","spacing","id","isRequired","value","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ChatContext","createContext","ChatState","useContext","ChatProvider","children","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","src","backgroundColor","marginLeft","padding","maxWidth","content","SingleChat","fetchAgain","setFetchAgain","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","fetchMessages","Authorization","token","get","emit","description","sendMessage","event","key","chatId","io","on","newMessageRecieved","chat","includes","base","md","pb","px","alignItems","isGroupChat","chatName","toUpperCase","flexDir","overflowY","alignSelf","margin","className","onKeyDown","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","UserBadgeItem","handleFunction","admin","py","UserListItem","_hover","background","color","GroupChatModal","useDisclosure","isOpen","onOpen","onClose","groupChatName","setGroupChatName","selectedUsers","setSelectedUsers","search","setSearch","searchResult","setSearchResult","handleSearch","query","handleSubmit","u","isCentered","flexWrap","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","latestMessage","substring","Chatpage","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qUA0HeA,EAjHD,WACZ,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAQC,cACd,EAA0BJ,qBAA1B,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAgCN,qBAAhC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAEMC,EAAWC,cAEXC,EAAa,uCAAG,gCAAAC,EAAA,yDACpBJ,GAAW,GACNL,GAAUE,EAFK,uBAGlBJ,EAAM,CACJY,MAAO,6BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZT,GAAW,GAVO,0CAgBZU,EAAS,CACbC,QAAS,CACP,eAAgB,qBAlBF,SAsBKC,IAAMC,KAC3B,sDACA,CAAElB,QAAOE,YACTa,GAzBgB,gBAsBVI,EAtBU,EAsBVA,KAORrB,EAAM,CACJY,MAAO,mBACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZM,aAAaC,QAAQ,WAAYC,KAAKC,UAAUJ,IAChDd,GAAW,GACXC,EAAS,UAtCS,kDAwClBR,EAAM,CACJY,MAAO,iBAEPC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZT,GAAW,GAhDO,0DAAH,qDAoDnB,OACE,eAAC,IAAD,CAAQmB,QAAQ,OAAhB,UACE,eAAC,IAAD,CAAaC,GAAG,QAAQC,YAAU,EAAlC,UACE,cAAC,IAAD,4BACA,cAAC,IAAD,CACEC,MAAO3B,EACP4B,KAAK,QACLC,YAAY,2BACZC,SAAU,SAACC,GAAD,OAAO9B,EAAS8B,EAAEC,OAAOL,aAGvC,eAAC,IAAD,CAAaF,GAAG,WAAWC,YAAU,EAArC,UACE,cAAC,IAAD,uBACA,eAAC,IAAD,CAAYO,KAAK,KAAjB,UACE,cAAC,IAAD,CACEN,MAAOzB,EACP4B,SAAU,SAACC,GAAD,OAAO5B,EAAY4B,EAAEC,OAAOL,QACtCC,KAAMhC,EAAO,OAAS,WACtBiC,YAAY,mBAEd,cAAC,IAAD,CAAmBK,MAAM,SAAzB,SACE,cAAC,IAAD,CAAQC,EAAE,UAAUF,KAAK,KAAKG,QAjFpB,kBAAMvC,GAASD,IAiFzB,SACGA,EAAO,OAAS,iBAKzB,cAAC,IAAD,CACEyC,YAAY,OACZH,MAAM,OACNI,MAAO,CAAEC,UAAW,IACpBH,QAAS5B,EACTgC,UAAWpC,EALb,mBASA,cAAC,IAAD,CACEqC,QAAQ,QACRJ,YAAY,MACZH,MAAM,OACNE,QAAS,WACPnC,EAAS,iBACTE,EAAY,SANhB,gCC8FSuC,EAhMA,WACb,MAAwB/C,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACM8C,EAAc,kBAAM9C,GAASD,IAC7BE,EAAQC,cACRO,EAAWC,cAEjB,EAAwBZ,qBAAxB,mBAAOiD,EAAP,KAAaC,EAAb,KACA,EAA0BlD,qBAA1B,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA8CN,qBAA9C,mBAAOmD,EAAP,KAAwBC,EAAxB,KACA,EAAgCpD,qBAAhC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAsBR,qBAAtB,mBAAOqD,EAAP,KAAYC,EAAZ,KACA,EAAoCtD,oBAAS,GAA7C,mBAAOuD,EAAP,KAAmBC,EAAnB,KAEM3C,EAAa,uCAAG,gCAAAC,EAAA,yDACpB0C,GAAc,GACTP,GAAS5C,GAAUE,GAAa4C,EAFjB,uBAGlBhD,EAAM,CACJY,MAAO,6BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZqC,GAAc,GAVI,6BAahBjD,IAAa4C,EAbG,uBAclBhD,EAAM,CACJY,MAAO,yBACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAnBM,0CAyBZC,EAAS,CACbC,QAAS,CACP,eAAgB,qBA3BF,UA8BKC,IAAMC,KAC3B,gDACA,CACE0B,OACA5C,QACAE,WACA8C,OAEFjC,GAtCgB,iBA8BVI,EA9BU,EA8BVA,KAURiC,QAAQC,IAAIlC,GACZrB,EAAM,CACJY,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZM,aAAaC,QAAQ,WAAYC,KAAKC,UAAUJ,IAChDgC,GAAc,GACd7C,EAAS,UAlDS,kDAoDlBR,EAAM,CACJY,MAAO,iBAEPC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZqC,GAAc,GA5DI,0DAAH,qDA8GnB,OACE,eAAC,IAAD,CAAQ3B,QAAQ,MAAhB,UACE,eAAC,IAAD,CAAaC,GAAG,aAAaC,YAAU,EAAvC,UACE,cAAC,IAAD,mBACA,cAAC,IAAD,CACEG,YAAY,kBACZC,SAAU,SAACC,GAAD,OAAOc,EAAQd,EAAEC,OAAOL,aAGtC,eAAC,IAAD,CAAaF,GAAG,QAAQC,YAAU,EAAlC,UACE,cAAC,IAAD,4BACA,cAAC,IAAD,CACEE,KAAK,QACLC,YAAY,2BACZC,SAAU,SAACC,GAAD,OAAO9B,EAAS8B,EAAEC,OAAOL,aAGvC,eAAC,IAAD,CAAaF,GAAG,WAAWC,YAAU,EAArC,UACE,cAAC,IAAD,uBACA,eAAC,IAAD,CAAYO,KAAK,KAAjB,UACE,cAAC,IAAD,CACEL,KAAMhC,EAAO,OAAS,WACtBiC,YAAY,iBACZC,SAAU,SAACC,GAAD,OAAO5B,EAAY4B,EAAEC,OAAOL,UAExC,cAAC,IAAD,CAAmBO,MAAM,SAAzB,SACE,cAAC,IAAD,CAAQC,EAAE,UAAUF,KAAK,KAAKG,QAASO,EAAvC,SACG/C,EAAO,OAAS,iBAKzB,eAAC,IAAD,CAAa6B,GAAG,WAAWC,YAAU,EAArC,UACE,cAAC,IAAD,+BACA,eAAC,IAAD,CAAYO,KAAK,KAAjB,UACE,cAAC,IAAD,CACEL,KAAMhC,EAAO,OAAS,WACtBiC,YAAY,mBACZC,SAAU,SAACC,GAAD,OAAOgB,EAAmBhB,EAAEC,OAAOL,UAE/C,cAAC,IAAD,CAAmBO,MAAM,SAAzB,SACE,cAAC,IAAD,CAAQC,EAAE,UAAUF,KAAK,KAAKG,QAASO,EAAvC,SACG/C,EAAO,OAAS,iBAKzB,eAAC,IAAD,CAAa6B,GAAG,MAAhB,UACE,cAAC,IAAD,kCACA,cAAC,IAAD,CACEG,KAAK,OACL0B,EAAG,IACHC,OAAO,UACPzB,SAAU,SAACC,GAAD,OAnGE,SAACyB,GAEnB,GADAL,GAAc,QACDM,IAATD,EAAJ,CAWA,GADAJ,QAAQC,IAAIG,GACM,eAAdA,EAAK5B,MAAuC,cAAd4B,EAAK5B,KA4BrC,OARA9B,EAAM,CACJY,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAEZqC,GAAc,GA1Bd,IAAMhC,EAAO,IAAIuC,SACjBvC,EAAKwC,OAAO,OAAQH,GACpBrC,EAAKwC,OAAO,gBAAiB,YAC7BxC,EAAKwC,OAAO,aAAc,cAC1BC,MAAM,0DAA2D,CAC/DC,OAAQ,OACRC,KAAM3C,IAEL4C,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAC5C,GACL8B,EAAO9B,EAAK+C,IAAIC,YAChBf,QAAQC,IAAIlC,EAAK+C,IAAIC,YACrBhB,GAAc,MAEfiB,OAAM,SAACC,GACNjB,QAAQC,IAAIgB,GACZlB,GAAc,WA3BlBrD,EAAM,CACJY,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA2FSwD,CAAYvC,EAAEC,OAAOuC,MAAM,UAGhD,cAAC,IAAD,CACElC,YAAY,OACZH,MAAM,OACNI,MAAO,CAAEC,UAAW,IACpBH,QAAS5B,EACTgC,UAAWU,EALb,yBC/HWsB,IC7CbC,EAAQC,ED6CKF,EA9Cf,WACE,IAAMlE,EAAWC,cASjB,OAPAoE,qBAAU,WACMrD,KAAKsD,MAAMxD,aAAayD,QAAQ,cAGpCvE,EAAS,YAClB,CAACA,IAGF,eAAC,IAAD,CAAWwE,KAAK,KAAKC,eAAa,EAAlC,UACE,cAAC,IAAD,CACEC,EAAE,OACFC,eAAe,SACf3B,EAAG,EACH4B,GAAG,QACHC,EAAE,OACFC,EAAE,gBACFC,aAAa,KACbC,YAAY,MARd,SAUE,cAAC,IAAD,CAAMC,SAAS,MAAMC,WAAW,YAAhC,2BAIF,cAAC,IAAD,CAAKN,GAAG,QAAQC,EAAE,OAAO7B,EAAG,EAAG+B,aAAa,KAAKC,YAAY,MAA7D,SACE,eAAC,IAAD,CAAMG,UAAQ,EAAChD,QAAQ,eAAvB,UACE,eAAC,IAAD,CAASiD,GAAG,MAAZ,UACE,cAAC,IAAD,oBACA,cAAC,IAAD,yBAEF,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,EAAD,MAEF,cAAC,IAAD,UACE,cAAC,EAAD,kB,gBEnDHC,EAAqB,SAACC,EAAUR,EAAGS,EAAGC,GAG/C,OACED,EAAID,EAASG,OAAS,GACtBH,EAASC,EAAI,GAAGG,OAAOC,MAAQb,EAAEY,OAAOC,KACxCL,EAASC,GAAGG,OAAOC,MAAQH,EAEpB,GAEND,EAAID,EAASG,OAAS,GACrBH,EAASC,EAAI,GAAGG,OAAOC,MAAQb,EAAEY,OAAOC,KACxCL,EAASC,GAAGG,OAAOC,MAAQH,GAC5BD,IAAMD,EAASG,OAAS,GAAKH,EAASC,GAAGG,OAAOC,MAAQH,EAElD,EACG,QAGDI,EAAe,SAACN,EAAUR,EAAGS,EAAGC,GAC3C,OACED,EAAID,EAASG,OAAS,IACrBH,EAASC,EAAI,GAAGG,OAAOC,MAAQb,EAAEY,OAAOC,UACRxC,IAA/BmC,EAASC,EAAI,GAAGG,OAAOC,MACzBL,EAASC,GAAGG,OAAOC,MAAQH,GAIlBK,EAAgB,SAACP,EAAUC,EAAGC,GACzC,OACED,IAAMD,EAASG,OAAS,GACxBH,EAASA,EAASG,OAAS,GAAGC,OAAOC,MAAQH,GAC7CF,EAASA,EAASG,OAAS,GAAGC,OAAOC,KAI5BG,EAAa,SAACR,EAAUR,EAAGS,GACtC,OAAOA,EAAI,GAAKD,EAASC,EAAI,GAAGG,OAAOC,MAAQb,EAAEY,OAAOC,KAG7CI,EAAY,SAACC,EAAYC,GACpC,OAAOA,EAAM,GAAGN,MAAQK,EAAWL,IAAMM,EAAM,GAAG3D,KAAO2D,EAAM,GAAG3D,M,0BCvChE4D,EAAcC,0BAoCPC,EAAY,WACvB,OAAOC,qBAAWH,IAGLI,EAtCM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,EAAwClH,qBAAxC,mBAAOmH,EAAP,KAAqBC,EAArB,KACA,EAAwBpH,qBAAxB,mBAAOqH,EAAP,KAAaC,EAAb,KACA,EAAwCtH,mBAAS,IAAjD,mBAAOuH,EAAP,KAAqBC,EAArB,KACA,EAA0BxH,qBAA1B,mBAAOyH,EAAP,KAAcC,EAAd,KAEM/G,EAAWC,cAUjB,OARAoE,qBAAU,WACR,IAAM2C,EAAWhG,KAAKsD,MAAMxD,aAAayD,QAAQ,aACjDoC,EAAQK,GAEHA,GAAUhH,EAAS,OAEvB,CAACA,IAGF,cAACkG,EAAYe,SAAb,CACE5F,MAAO,CACLmF,eACAC,kBACAC,OACAC,UACAC,eACAC,kBACAC,QACAC,YATJ,SAYGR,KCoBQW,EA3CQ,SAAC,GAAkB,IAAhB5B,EAAe,EAAfA,SAChBoB,EAASN,IAATM,KAER,OACE,cAAC,IAAD,UAEGpB,GACCA,EAAS6B,KAAI,SAACrC,EAAGS,GAAJ,OACX,sBAAKvD,MAAO,CAAEoF,QAAS,QAAvB,WACIxB,EAAaN,EAAUR,EAAGS,EAAGmB,EAAKf,MAClCE,EAAcP,EAAUC,EAAGmB,EAAKf,OAChC,cAAC,IAAD,CAAS0B,MAAOvC,EAAEY,OAAOpD,KAAMgF,UAAU,eAAeC,UAAQ,EAAhE,SACE,cAAC,IAAD,CACEC,GAAG,MACHC,GAAI,EACJ9F,KAAK,KACL+F,OAAO,UACPpF,KAAMwC,EAAEY,OAAOpD,KACfqF,IAAK7C,EAAEY,OAAOhD,QAIpB,sBACEV,MAAO,CACL4F,gBAAgB,GAAD,OACb9C,EAAEY,OAAOC,MAAQe,EAAKf,IAAM,UAAY,WAE1CkC,WAAYxC,EAAmBC,EAAUR,EAAGS,EAAGmB,EAAKf,KACpD1D,UAAW6D,EAAWR,EAAUR,EAAGS,EAAGmB,EAAKf,KAAO,EAAI,GACtDZ,aAAc,OACd+C,QAAS,WACTC,SAAU,OATd,SAYGjD,EAAEkD,YA1B+BlD,EAAEa,WHsOnCsC,EAvOI,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAChC,EAAgC9I,mBAAS,IAAzC,mBAAOiG,EAAP,KAAiB8C,EAAjB,KACA,EAA8B/I,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAAoCV,mBAAS,IAA7C,mBAAOgJ,EAAP,KAAmBC,EAAnB,KACA,EAA8CjJ,oBAAS,GAAvD,mBAAOkJ,EAAP,KAAwBC,EAAxB,KACA,EAA4BnJ,oBAAS,GAArC,mBAAOoJ,EAAP,KAAeC,EAAf,KACA,EAAgCrJ,oBAAS,GAAzC,mBAAOsJ,EAAP,KAAiBC,EAAjB,KACMpJ,EAAQC,cAId,EACE2G,IADMI,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAAiBC,EAAvC,EAAuCA,KAAME,EAA7C,EAA6CA,aAAcC,EAA3D,EAA2DA,gBAGrDgC,EAAa,uCAAG,gCAAA1I,EAAA,yDACfqG,EADe,iEAIZ/F,EAAS,CACbC,QAAS,CACPoI,cAAc,UAAD,OAAYpC,EAAKqC,SAIlChJ,GAAW,GAVO,SAYKY,IAAMqI,IAAN,2DAC+BxC,EAAab,KACjElF,GAdgB,gBAYVI,EAZU,EAYVA,KAIRiC,QAAQC,IAAIlC,GACZuH,EAAYvH,GACZd,GAAW,GAEXoE,EAAO8E,KAAK,YAAazC,EAAab,KApBpB,kDAsBlBnG,EAAM,CACJY,MAAO,iBACP8I,YAAa,8BACb7I,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA5BM,0DAAH,qDAiCb2I,GAAW,uCAAG,WAAOC,GAAP,mBAAAjJ,EAAA,yDACA,UAAdiJ,EAAMC,MAAmBhB,EADX,wBAEhBlE,EAAO8E,KAAK,cAAezC,EAAab,KAFxB,SAIRlF,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChBoI,cAAc,UAAD,OAAYpC,EAAKqC,SAGlCT,EAAc,IAVA,SAWS3H,IAAMC,KAC3B,mDACA,CACEoH,QAASK,EACTiB,OAAQ9C,GAEV/F,GAjBY,gBAWNI,EAXM,EAWNA,KAQRsD,EAAO8E,KAAK,cAAepI,GAC3BuH,EAAY,GAAD,mBAAK9C,GAAL,CAAezE,KApBZ,kDAsBdrB,EAAM,CACJY,MAAO,iBACP8I,YAAa,6BACb7I,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA5BE,0DAAH,sDAkCjB6D,qBAAU,YACRF,EAASoF,YArFI,0CAyFNN,KAAK,QAASvC,GACrBvC,EAAOqF,GAAG,aAAa,kBAAMhB,GAAmB,MAChDrE,EAAOqF,GAAG,UAAU,kBAAMZ,GAAY,MACtCzE,EAAOqF,GAAG,eAAe,kBAAMZ,GAAY,QAG1C,IAEHvE,qBAAU,WACRwE,IAEAzE,EAAsBoC,IAErB,CAACA,IAEJnC,qBAAU,WACRF,EAAOqF,GAAG,oBAAoB,SAACC,GAE1BrF,GACDA,EAAoBuB,MAAQ8D,EAAmBC,KAAK/D,IAOpDyC,EAAY,GAAD,mBAAK9C,GAAL,CAAemE,KALrB7C,EAAa+C,SAASF,KACzB5C,EAAgB,CAAC4C,GAAF,mBAAyB7C,KACxCuB,GAAeD,UA6BvB,OACE,mCACG1B,EACC,qCACE,eAAC,IAAD,CACEvB,SAAU,CAAE2E,KAAM,OAAQC,GAAI,QAC9BC,GAAI,EACJC,GAAI,EACJlF,EAAE,OACFK,WAAW,YACXR,EAAE,OACFC,eAAgB,CAAEiF,KAAM,iBACxBI,WAAW,SARb,UAUE,cAAC,IAAD,CACEtF,EAAG,CAAEkF,KAAM,OAAQC,GAAI,QAEvB/H,QAAS,kBAAM2E,EAAgB,OAEhCnB,IACGkB,EAAayD,YASb,mCACGzD,EAAa0D,SAASC,gBATzB,mCACGpE,EAAUW,EAAMF,EAAaP,aAiBtC,eAAC,IAAD,CACEvB,EAAE,OACF0F,QAAQ,SACRzF,eAAe,WACf3B,EAAG,EACH4B,GAAG,UACHC,EAAE,OACFhD,EAAE,OACFkD,aAAa,KACbsF,UAAU,SATZ,UAWGvK,EACC,cAAC,IAAD,CACE6B,KAAK,KACLkD,EAAG,GACHhD,EAAG,GACHyI,UAAU,SACVC,OAAO,SAGT,qBAAKC,UAAU,WAAf,SACE,cAAC,EAAD,CAAgBlF,SAAUA,MAI9B,eAAC,IAAD,CACEmF,UAAWtB,GACXhI,GAAG,aACHC,YAAU,EACVoG,GAAI,EAJN,UAMGmB,EAAW,4CAAuB,6BACnC,cAAC,IAAD,CACExG,QAAQ,SACRyC,GAAG,UACHrD,YAAY,oBACZF,MAAOgH,EACP7G,SAjGQ,SAACC,GAGrB,GAFA6G,EAAc7G,EAAEC,OAAOL,OAElBkH,EAAL,CAEKE,IACHC,GAAU,GACVvE,EAAO8E,KAAK,SAAUzC,EAAab,MAErC,IAAI+E,GAAiB,IAAIC,MAAOC,UAEhCC,YAAW,YACK,IAAIF,MAAOC,UACAF,GAHT,KAIejC,IAC7BtE,EAAO8E,KAAK,cAAezC,EAAab,KACxC+C,GAAU,MANI,kBA8Fd,cAAC,IAAD,CAAKhE,EAAE,OAAOsF,WAAW,SAASrF,eAAe,SAAS9C,EAAE,OAA5D,SACE,cAAC,IAAD,CAAMoD,SAAS,MAAM6E,GAAI,EAAG5E,WAAW,YAAvC,oDIxNK4F,EAnBC,SAAC,GAAmC,IAAjC5C,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACrB3B,EAAiBJ,IAAjBI,aAER,OACE,cAAC,IAAD,CACE9B,EAAG,CAAEkF,KAAMpD,EAAe,OAAS,OAAQqD,GAAI,QAC/CG,WAAW,SACXI,QAAQ,SACRpH,EAAG,EACH4B,GAAG,QACHC,EAAG,CAAE+E,KAAM,OAAQC,GAAI,OACvB9E,aAAa,KACbC,YAAY,MARd,SAUE,cAAC,EAAD,CAAYkD,WAAYA,EAAYC,cAAeA,O,QCG1C4C,EAnBK,WAClB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAUC,OAAO,SACjB,cAAC,IAAD,CAAUA,OAAO,SACjB,cAAC,IAAD,CAAUA,OAAO,SACjB,cAAC,IAAD,CAAUA,OAAO,SACjB,cAAC,IAAD,CAAUA,OAAO,SACjB,cAAC,IAAD,CAAUA,OAAO,SACjB,cAAC,IAAD,CAAUA,OAAO,SACjB,cAAC,IAAD,CAAUA,OAAO,SACjB,cAAC,IAAD,CAAUA,OAAO,SACjB,cAAC,IAAD,CAAUA,OAAO,SACjB,cAAC,IAAD,CAAUA,OAAO,SACjB,cAAC,IAAD,CAAUA,OAAO,a,gBCORC,EArBO,SAAC,GAAqC,IAAnCvE,EAAkC,EAAlCA,KAAMwE,EAA4B,EAA5BA,eAAgBC,EAAY,EAAZA,MAC7C,OACE,eAAC,IAAD,CACEpB,GAAI,EACJqB,GAAI,EACJrG,aAAa,KACbD,EAAG,EACHM,GAAI,EACJjD,QAAQ,QACR8C,SAAU,GACVlD,YAAY,SACZ2F,OAAO,UACP5F,QAASoJ,EAVX,UAYGxE,EAAKpE,KACL6I,IAAUzE,EAAKf,KAAO,gDCkBd0F,EAjCM,SAAC,GAAwB,IAAtBH,EAAqB,EAArBA,eACdxE,EAASN,IAATM,KAER,OACE,cAAC,IAAD,CACE5E,QAASoJ,EACTxD,OAAO,UACP9C,GAAG,UACH0G,OAAQ,CACNC,WAAY,UACZC,MAAO,SAET3G,EAAE,OACFH,EAAE,OACFsF,WAAW,SACXwB,MAAM,QACNzB,GAAI,EACJqB,GAAI,EACJhG,GAAI,EACJL,aAAa,KAff,SAkBE,eAAC,IAAD,WACE,cAAC,IAAD,UAAO2B,EAAKpE,OACZ,eAAC,IAAD,CAAM2C,SAAS,KAAf,UACE,yCACCyB,EAAKhH,eCyLC+L,EAjMQ,SAAC,GAAkB,IAAhBlF,EAAe,EAAfA,SACxB,EAAoCmF,cAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QACxB,EAA0CxM,qBAA1C,mBAAOyM,EAAP,KAAsBC,EAAtB,KACA,EAA0C1M,mBAAS,IAAnD,mBAAO2M,EAAP,KAAsBC,EAAtB,KACA,EAA4B5M,mBAAS,IAArC,mBAAO6M,EAAP,KAAeC,EAAf,KACA,EAAwC9M,mBAAS,IAAjD,mBAAO+M,EAAP,KAAqBC,EAArB,KACA,EAA8BhN,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACMP,EAAQC,cAEd,EAAkC2G,IAA1BM,EAAR,EAAQA,KAAMI,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,SAiBfuF,EAAY,uCAAG,WAAOC,GAAP,mBAAApM,EAAA,yDACnBgM,EAAUI,GACLA,EAFc,iEAOjBxM,GAAW,GACLU,EAAS,CACbC,QAAS,CACPoI,cAAc,UAAD,OAAYpC,EAAKqC,SAVjB,SAaMpI,IAAMqI,IAAN,+DAAkEkD,GAAUzL,GAblF,gBAaTI,EAbS,EAaTA,KACRiC,QAAQC,IAAIlC,GAEZd,GAAW,GACXsM,EAAgBxL,GAjBC,kDAmBjBrB,EAAM,CACJY,MAAO,iBACP8I,YAAa,oCACb7I,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAzBK,0DAAH,sDAkCZgM,EAAY,uCAAG,gCAAArM,EAAA,yDACd2L,GAAkBE,EADJ,uBAEjBxM,EAAM,CACJY,MAAO,6BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,QAPK,0CAaXC,EAAS,CACbC,QAAS,CACPoI,cAAc,UAAD,OAAYpC,EAAKqC,SAfjB,SAkBMpI,IAAMC,KAAN,sDAErB,CACE0B,KAAMwJ,EACN7F,MAAOjF,KAAKC,UAAU+K,EAAc7E,KAAI,SAACsF,GAAD,OAAOA,EAAE9G,SAEnDlF,GAxBe,gBAkBTI,EAlBS,EAkBTA,KAQRkG,EAAS,CAAClG,GAAF,mBAAWiG,KACnB+E,IACArM,EAAM,CACJY,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAjCK,kDAoCjBhB,EAAM,CACJY,MAAO,6BACPC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAzCK,0DAAH,qDA8ClB,OADAsC,QAAQC,IAAIiJ,GAEV,qCACE,sBAAMlK,QAAS8J,EAAf,SAAwBrF,IAExB,eAAC,IAAD,CAAOsF,QAASA,EAASF,OAAQA,EAAQe,YAAU,EAAnD,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CACEzH,SAAS,OACTC,WAAW,YACXR,EAAE,OACFC,eAAe,SAJjB,+BAQA,cAAC,IAAD,IACA,eAAC,IAAD,CAAWD,EAAE,OAAO0F,QAAQ,SAASJ,WAAW,SAAhD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEzI,YAAY,YACZ6D,GAAI,EACJ5D,SAAU,SAACC,GAAD,OAAOsK,EAAiBtK,EAAEC,OAAOL,YAG/C,cAAC,IAAD,UACE,cAAC,IAAD,CACEE,YAAY,kCACZ6D,GAAI,EACJ5D,SAAU,SAACC,GAAD,OAAO6K,EAAa7K,EAAEC,OAAOL,YAI3C,cAAC,IAAD,CAAKwD,EAAE,OAAOH,EAAE,OAAOiI,SAAS,OAAhC,SACGX,EAAc7E,KAAI,SAACsF,GAAD,OACjB,cAAC,EAAD,CAEE/F,KAAM+F,EACNvB,eAAgB,kBAvFV0B,EAuF6BH,OAtFjDR,EAAiBD,EAAca,QAAO,SAACC,GAAD,OAASA,EAAInH,MAAQiH,EAAQjH,QADhD,IAACiH,IAqFDH,EAAE9G,UAQZ7F,EAEC,6CAFM,OAINsM,QAJM,IAINA,OAJM,EAINA,EACIW,MAAM,EAAG,GACV5F,KAAI,SAACT,GAAD,OAGH,cAAC,EAAD,CAEEA,KAAMA,EACNwE,eAAgB,kBAtJb8B,EAsJ+BtG,OArJ9CsF,EAAcrC,SAASqD,GACzBxN,EAAM,CACJY,MAAO,qBACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,QAKdyL,EAAiB,GAAD,mBAAKD,GAAL,CAAoBgB,MAZlB,IAACA,IAoJEtG,EAAKf,WAuBpB,cAAC,IAAD,UACE,cAAC,IAAD,CAAQ7D,QAAS0K,EAAczK,YAAY,OAA3C,qCC9ECkL,EAnHC,SAAC,GAAoB,IAAlB/E,EAAiB,EAAjBA,WACjB,EAAoC7I,qBAApC,mBAAO2G,EAAP,KAAmBkH,EAAnB,KAEA,EAAiE9G,IAAzDI,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAAiBC,EAAvC,EAAuCA,KAAMI,EAA7C,EAA6CA,MAAOC,EAApD,EAAoDA,SAE9CvH,EAAQC,cAER0N,EAAU,uCAAG,gCAAAhN,EAAA,sEAGTM,EAAS,CACbC,QAAS,CACPoI,cAAc,UAAD,OAAYpC,EAAKqC,SALnB,SASQpI,IAAMqI,IAAI,gDAAiDvI,GATnE,gBASPI,EATO,EASPA,KACRkG,EAASlG,GAVM,gDAYfrB,EAAM,CACJY,MAAO,iBACP8I,YAAa,2BACb7I,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAlBG,yDAAH,qDA6BhB,OANA6D,qBAAU,WACR6I,EAAclM,KAAKsD,MAAMxD,aAAayD,QAAQ,cAC9C4I,MAEC,CAACjF,IAGF,eAAC,IAAD,CACExD,EAAG,CAAEkF,KAAMpD,EAAe,OAAS,OAAQqD,GAAI,QAC/CO,QAAQ,SACRJ,WAAW,SACXhH,EAAG,EACH4B,GAAG,QACHC,EAAG,CAAE+E,KAAM,OAAQC,GAAI,OACvB9E,aAAa,KACbC,YAAY,MARd,UAUE,eAAC,IAAD,CACE8E,GAAI,EACJC,GAAI,EACJ9E,SAAU,CAAE2E,KAAM,OAAQC,GAAI,QAC9B3E,WAAW,YACXR,EAAE,OACFG,EAAE,OACFF,eAAe,gBACfqF,WAAW,SARb,qBAWE,cAAC,EAAD,UACE,cAAC,IAAD,CACEtF,EAAE,OACFO,SAAU,CAAE2E,KAAM,OAAQC,GAAI,OAAQuD,GAAI,QAF5C,iCASJ,cAAC,IAAD,CACE1I,EAAE,OACF0F,QAAQ,SACRpH,EAAG,EACH4B,GAAG,UACHC,EAAE,OACFhD,EAAE,OACFkD,aAAa,KACbsF,UAAU,SARZ,SAUGvD,EACC,cAAC,IAAD,CAAOuD,UAAU,SAAjB,SACGvD,EAAMK,KAAI,SAACuC,GAAD,OACT,eAAC,IAAD,CACE5H,QAAS,kBAAM2E,EAAgBiD,IAC/BhC,OAAO,UACP9C,GAAI4B,IAAiBkD,EAAO,UAAY,UACxC8B,MAAOhF,IAAiBkD,EAAO,QAAU,QACzCK,GAAI,EACJqB,GAAI,EACJrG,aAAa,KAPf,UAUE,cAAC,IAAD,UACI2E,EAAKO,YAEHP,EAAKQ,SADLnE,EAAUC,EAAY0D,EAAKzD,SAGhCyD,EAAK2D,eACJ,eAAC,IAAD,CAAMpI,SAAS,KAAf,UACE,8BAAIyE,EAAK2D,cAAc3H,OAAOpD,KAA9B,OADF,IAEGoH,EAAK2D,cAAcrF,QAAQvC,OAAS,GACjCiE,EAAK2D,cAAcrF,QAAQsF,UAAU,EAAG,IAAM,MAC9C5D,EAAK2D,cAAcrF,aAZtB0B,EAAK/D,UAmBhB,cAAC,EAAD,UC/FK4H,EAjBE,WACf,MAAoClO,oBAAS,GAA7C,mBAAO6I,EAAP,KAAmBC,EAAnB,KACQzB,EAASN,IAATM,KAER,OACE,qBAAK1E,MAAO,CAAEJ,MAAO,QAArB,SAEE,eAAC,IAAD,CAAK8C,EAAE,OAAOC,eAAe,gBAAgBE,EAAE,OAAOhD,EAAE,SAASmB,EAAE,OAAnE,UACG0D,GAAQ,cAAC,EAAD,CAASwB,WAAYA,IAC7BxB,GACC,cAAC,EAAD,CAASwB,WAAYA,EAAYC,cAAeA,UC8F3CqF,MAtGf,WA0CE,OACE,qBAAKhD,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOiD,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,cAAC,EAAD,YC3CvBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpK,MAAK,YAAkD,IAA/CqK,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,iBCGdO,IAASC,OACP,eAAC,IAAD,WACE,cAAC,KAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAHN,OAOAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.2fb65e7c.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const navigate = useNavigate();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 4000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    // console.log(email, password);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"https://chattybackrooms.onrender.com/api/user/login\",\n        { email, password },\n        config\n      );\n\n      // console.log(JSON.stringify(data));\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 4000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      navigate(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        //description: error.response.data.message,\n        status: \"error\",\n        duration: 4000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"test@test.com\");\n          setPassword(\"test\");\n        }}\n      >\n        Get Guest User\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const navigate = useNavigate();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    //console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"https://chattybackrooms.onrender.com/api/user\", //localhost:3001\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      navigate(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        //description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n  \n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;","import {\n    Box,\n    Container,\n    Tab,\n    TabList,\n    TabPanel,\n    TabPanels,\n    Tabs,\n    Text,\n  } from \"@chakra-ui/react\";\n  import { useEffect } from \"react\";\n  import { useNavigate } from \"react-router\";\n  import Login from \"../components/Authentication/Login\";\n  import Signup from \"../components/Authentication/Signup\";\n  \n  function Homepage() {\n    const navigate = useNavigate();\n  \n    useEffect(() => {\n       const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n     // const user = true;\n  \n      if (user) navigate(\"/chats\");\n    }, [navigate]);\n  \n    return (\n      <Container maxW=\"xl\" centerContent>\n        <Box\n          d=\"flex\"\n          justifyContent=\"center\"\n          p={3}\n          bg=\"white\"\n          w=\"100%\"\n          m=\"40px 0 15px 0\"\n          borderRadius=\"lg\"\n          borderWidth=\"1px\"\n        >\n          <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n            ChattyRooms\n          </Text>\n        </Box>\n        <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n          <Tabs isFitted variant=\"soft-rounded\">\n            <TabList mb=\"1em\">\n              <Tab>Login</Tab>\n              <Tab>Sign Up</Tab>\n            </TabList>\n            <TabPanels>\n              <TabPanel>\n                <Login />\n              </TabPanel>\n              <TabPanel>\n                <Signup />\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </Box>\n      </Container>\n    );\n  }\n  \n  export default Homepage;","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/react\";\n//import \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\n//import ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\n\nimport io from \"socket.io-client\";\n//import UpdateGroupChatModal from \"./UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"https://chattybackrooms.onrender.com/\";  // change from Heroku deployment to Render\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  \n\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `https://chattybackrooms.onrender.com/api/message/${selectedChat._id}`,\n        config\n      ); //\n      console.log(data);\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"https://chattybackrooms.onrender.com/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(\n      ENDPOINT\n      // {transports:['websocket', 'polling','flashsocket']}\n    );\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    \n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    \n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    let timerLength = 3000;\n    setTimeout(() => {\n      let timeNow = new Date().getTime();\n      let timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n             \n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  \n                  {/* <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  /> */}\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  {/* <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  /> */}\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? <div>typing...</div> : <></>}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","\nexport const isSameSenderMargin = (messages, m, i, userId) => {\n    // console.log(i === messages.length - 1);\n  \n    if (\n      i < messages.length - 1 &&\n      messages[i + 1].sender._id === m.sender._id &&\n      messages[i].sender._id !== userId\n    )\n      return 33;\n    else if (\n      (i < messages.length - 1 &&\n        messages[i + 1].sender._id !== m.sender._id &&\n        messages[i].sender._id !== userId) ||\n      (i === messages.length - 1 && messages[i].sender._id !== userId)\n    )\n      return 0;\n    else return \"auto\";\n  };\n  \n  export const isSameSender = (messages, m, i, userId) => {\n    return (\n      i < messages.length - 1 &&\n      (messages[i + 1].sender._id !== m.sender._id ||\n        messages[i + 1].sender._id === undefined) &&\n      messages[i].sender._id !== userId\n    );\n  };\n  \n  export const isLastMessage = (messages, i, userId) => {\n    return (\n      i === messages.length - 1 &&\n      messages[messages.length - 1].sender._id !== userId &&\n      messages[messages.length - 1].sender._id\n    );\n  };\n  \n  export const isSameUser = (messages, m, i) => {\n    return i > 0 && messages[i - 1].sender._id === m.sender._id;\n  };\n  \n  export const getSender = (loggedUser, users) => {\n    return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n  };\n  \n  export const getSenderFull = (loggedUser, users) => {\n    return users[0]._id === loggedUser._id ? users[1] : users[0];\n  };","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) navigate(\"/\");\n    \n  }, [navigate]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/react\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      \n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n        \n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;","import { Box } from \"@chakra-ui/layout\";\n//import \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;","//import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/react\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      {/* <CloseIcon pl={1} /> */}\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;","import { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction }) => {\n  const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n     \n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n\n","import {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    Button,\n    useDisclosure,\n    FormControl,\n    Input,\n    useToast,\n    Box,\n  } from \"@chakra-ui/react\";\n  import axios from \"axios\";\n  import { useState } from \"react\";\n  import { ChatState } from \"../Context/ChatProvider\";\n  import UserBadgeItem from \"./userAvatar/UserBadgeItem\";\n  import UserListItem from \"./userAvatar/UserListItem.js\";\n  \n  const GroupChatModal = ({ children }) => {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const [groupChatName, setGroupChatName] = useState();\n    const [selectedUsers, setSelectedUsers] = useState([]);\n    const [search, setSearch] = useState(\"\");\n    const [searchResult, setSearchResult] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const toast = useToast();\n  \n    const { user, chats, setChats } = ChatState();\n  \n    const handleGroup = (userToAdd) => {\n      if (selectedUsers.includes(userToAdd)) {\n        toast({\n          title: \"User already added\",\n          status: \"warning\",\n          duration: 5000,\n          isClosable: true,\n          position: \"top\",\n        });\n        return;\n      }\n  \n      setSelectedUsers([...selectedUsers, userToAdd]);\n    };\n  \n    const handleSearch = async (query) => {\n      setSearch(query);\n      if (!query) {\n        return;\n      }\n  \n      try {\n        setLoading(true);\n        const config = {\n          headers: {\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        const  {data}  = await axios.get(`https://chattybackrooms.onrender.com/api/user?search=${search}`, config);\n        console.log(data);\n\n        setLoading(false);\n        setSearchResult(data);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to Load the Search Results\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom-left\",\n        });\n      }\n    };\n  \n    const handleDelete = (delUser) => {\n      setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n    };\n  \n    const handleSubmit = async () => {\n      if (!groupChatName || !selectedUsers) {\n        toast({\n          title: \"Please fill all the feilds\",\n          status: \"warning\",\n          duration: 5000,\n          isClosable: true,\n          position: \"top\",\n        });\n        return;\n      }\n  \n      try {\n        const config = {\n          headers: {\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        const { data } = await axios.post(\n          `https://chattybackrooms.onrender.com/api/chat/group`,\n          {\n            name: groupChatName,\n            users: JSON.stringify(selectedUsers.map((u) => u._id)),\n          },\n          config\n        );\n        setChats([data, ...chats]);\n        onClose();\n        toast({\n          title: \"New Group Chat Created!\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      } catch (error) {\n        toast({\n          title: \"Failed to Create the Chat!\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    };\n    console.log(selectedUsers)\n    return (\n      <>\n        <span onClick={onOpen}>{children}</span>\n  \n        <Modal onClose={onClose} isOpen={isOpen} isCentered>\n          <ModalOverlay />\n          <ModalContent>\n            <ModalHeader\n              fontSize=\"35px\"\n              fontFamily=\"Work sans\"\n              d=\"flex\"\n              justifyContent=\"center\"\n            >\n              Create Group Chat\n            </ModalHeader>\n            <ModalCloseButton />\n            <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n              <FormControl>\n                <Input\n                  placeholder=\"Chat Name\"\n                  mb={3}\n                  onChange={(e) => setGroupChatName(e.target.value)}\n                />\n              </FormControl>\n              <FormControl>\n                <Input\n                  placeholder=\"Add Users ex: Hare, Test, Bobby\"\n                  mb={1}\n                  onChange={(e) => handleSearch(e.target.value)}\n                />\n              </FormControl>\n              \n              <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n                {selectedUsers.map((u) => (\n                  <UserBadgeItem\n                    key={u._id}\n                    user={u}\n                    handleFunction={() => handleDelete(u)}\n                  />\n                ))}\n              </Box>\n              \n\n              {loading ? (\n                // <ChatLoading />\n                <div>Loading...</div>\n              ) : (\n                searchResult\n                  ?.slice(0, 4)\n                  .map((user) => (\n                      \n                      \n                    <UserListItem\n                      key={user._id}\n                      user={user}\n                      handleFunction={() => handleGroup(user)}\n                    />\n                  ))\n              )}\n              \n              {/* {loading ? (\n                // <ChatLoading />\n                <div>Loading...</div>\n              ) : (\n                searchResult\n                  ?.slice(0, 2)\n                  .map((user) => (\n                      \n                    <UserListItem\n                      key={user._id}\n                      user={user}\n                      handleFunction={() => handleGroup(user)}\n                    />\n                  ))\n              )} */}\n            </ModalBody>\n            <ModalFooter>\n              <Button onClick={handleSubmit} colorScheme=\"blue\">\n                Create Chat\n              </Button>\n            </ModalFooter>\n          </ModalContent>\n        </Modal>\n      </>\n    );\n  };\n  \n  export default GroupChatModal;","//import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"https://chattybackrooms.onrender.com/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            //rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} </b>: \n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\n//import SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n     {/* {user && } */}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage","import React, { useState, useEffect } from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\n\nimport io from \"socket.io-client\";\nimport \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport Chatpage from \"./Pages/Chatpage\";\n\n\nfunction App() {\n  // // Before Login\n  // const [loggedIn, setLoggedIn] = useState(false);\n  // const [room, setRoom] = useState(\"\");\n  // const [userName, setUserName] = useState(\"\");\n\n  // // After Login\n  // const [message, setMessage] = useState(\"\");\n  // const [messageList, setMessageList] = useState([]);\n\n  // useEffect(() => {\n  //   socket = io(CONNECTION_PORT, {\n  //     withCredentials: true,\n      \n  //   });\n  // }, [CONNECTION_PORT]);\n\n  // useEffect(() => {\n  //   socket.on(\"receive_message\", (data) => {\n  //     setMessageList([...messageList, data]);\n  //   });\n  // });\n\n  // const connectToRoom = () => {\n  //   setLoggedIn(true);\n  //   socket.emit(\"join_room\", room);\n  // };\n\n  // const sendMessage = async () => {\n  //   let messageContent = {\n  //     room: room,\n  //     content: {\n  //       author: userName,\n  //       message: message,\n  //     },\n  //   };\n\n  //   await socket.emit(\"send_message\", messageContent);\n  //   setMessageList([...messageList, messageContent.content]);\n  //   setMessage(\"\");\n  // };\n\n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route path=\"/\" element={<Homepage />} />\n        <Route path=\"/chats\" element={<Chatpage />} />\n      </Routes>\n\n      {/* {!loggedIn ? (\n        <div className=\"logIn\">\n          <div className=\"inputs\">\n            <input\n              type=\"text\"\n              placeholder=\"Name...\"\n              onChange={(e) => {\n                setUserName(e.target.value);\n              }}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Room...\"\n              onChange={(e) => {\n                setRoom(e.target.value);\n              }}\n            />\n          </div>\n          <button onClick={connectToRoom}>Enter Chat</button>\n        </div>\n      ) : (\n        <div className=\"chatContainer\">\n          <div className=\"messages\">\n            {messageList.map((val, key) => {\n              return (\n                <div\n                  className=\"messageContainer\"\n                  id={val.author == userName ? \"You\" : \"Other\"}\n                >\n                  <div className=\"messageIndividual\">\n                    {val.author}: {val.message}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"messageInputs\">\n            <input\n              type=\"text\"\n              placeholder=\"Message...\"\n              onChange={(e) => {\n                setMessage(e.target.value);\n              }}\n            />\n            <button onClick={sendMessage}>Send</button>\n          </div>\n        </div>\n      )} */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>,\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n "],"sourceRoot":""}